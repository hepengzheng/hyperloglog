package gohll

import (
	"math"
	"math/rand"
	"os"
	"time"
)

// the functions in this file are used to generate the input set for unit test.
// note these functions were generated by ChatGPT.

const (
	numStrings    = 1000000
	numDuplicates = 10000
	stringLength  = 6
	filename      = "example.txt"
)

var uniqueStrings = make(map[string]int)

func relativeError(count int) float64 {
	return math.Abs(float64(count-numStrings+numDuplicates-1)) / numStrings
}

func generateRandomString(length int) string {
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	seed := rand.NewSource(time.Now().UnixNano())
	randGen := rand.New(seed)

	b := make([]byte, length)
	for i := range b {
		b[i] = charset[randGen.Intn(len(charset))]
	}
	return string(b)
}

func Init() {
	// Generate unique strings
	for i := 0; i < numStrings-numDuplicates; i++ {
		s := generateRandomString(stringLength)
		uniqueStrings[s]++
	}

	// Generate duplicate strings
	for i := 0; i < numDuplicates; i++ {
		// Generate a random index to pick a string from uniqueStrings
		randIndex := rand.Intn(len(uniqueStrings))
		var duplicateString string
		for s := range uniqueStrings {
			if randIndex == 0 {
				duplicateString = s
				break
			}
			randIndex--
		}
		uniqueStrings[duplicateString]++
	}

	_ = os.Remove(filename)
	for s := range uniqueStrings {
		appendStringToFile(filename, s+"\n")
	}

}

func appendStringToFile(filename, text string) {
	// Open the file in append mode, create it if it doesn't exist
	file, _ := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	defer func() {
		_ = file.Close()
	}()
	_, _ = file.WriteString(text)
}
